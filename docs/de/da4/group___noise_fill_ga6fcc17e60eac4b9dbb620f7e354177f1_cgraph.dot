digraph "fill_2dnoise8"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="fill_2dnoise8",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Fill an LED matrix with random colors, using 8-bit noise."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="blend",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/db8/group___color_blends.html#ga4f06b4423f71f77346aaf5dabe7dd05c",tooltip="Computes a new color blended some fraction of the way between two other colors."];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="nblend",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$dc/db8/group___color_blends.html#ga325120664a9c9b41abceee65303b0c4e",tooltip="Destructively modifies one color, blending in a given fraction of an overlay color."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="blend8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d98/group___math.html#ga9a604de042246d6c87fdbfdd5578f377",tooltip="Blend a variable proportion (0-255) of one byte to another."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="cleanup_R1",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/da5/group___scaling_dirty.html#ga3fade00fb4cf5b937b973128198a7a79",tooltip="Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls."];
  Node4 -> Node6 [id="edge5_Node000004_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="scale8_LEAVING_R1_DIRTY",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/da5/group___scaling_dirty.html#ga7386235cada3aca429b189681d2ec56d",tooltip="This version of scale8() does not clean up the R1 register on AVR."];
  Node3 -> Node5 [id="edge6_Node000003_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node6 [id="edge7_Node000003_Node000006",color="steelblue1",style="solid",tooltip=" "];
  Node1 -> Node7 [id="edge8_Node000001_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="fill_raw_2dnoise8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$de/da4/group___noise_fill.html#ga3dc6c55a3f8495a7bc6dc0124434c688",tooltip="Fill a 2D 8-bit buffer with noise, using inoise8()"];
  Node7 -> Node7 [id="edge9_Node000007_Node000007",color="steelblue1",style="solid",tooltip=" "];
  Node7 -> Node8 [id="edge10_Node000007_Node000008",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="inoise8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d8/df9/group___noise_generation.html#gaa521ccca6038d7b5e881fe2e8f35d3bc",tooltip="8-Bit, fixed point implementation of Perlin's noise."];
  Node8 -> Node9 [id="edge11_Node000008_Node000009",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="inoise8_raw",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$d8/df9/group___noise_generation.html#ga6c57ed3ea69e819c29602578ecbabd71",tooltip="8-bit, fixed point implementation of Perlin's noise without scaling."];
  Node8 -> Node15 [id="edge12_Node000008_Node000015",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="qadd8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d5/d98/group___math.html#ga07133b3085824d0fcd4f5086d286c4b5",tooltip="Add one byte to another, saturating at 0xFF."];
  Node7 -> Node14 [id="edge13_Node000007_Node000014",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="scale8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/da8/group___scaling.html#gad7535ccda9c92470c4e6ee0265585555",tooltip="Scale one byte by a second one, which is treated as the numerator of a fraction whose denominator is ..."];
  Node1 -> Node16 [id="edge14_Node000001_Node000016",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="CRGB::nscale8",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$db/d87/group___pixel_types.html#a5a3c3370a7de840ac31c07f6dc9bdb63",tooltip="Scale down a RGB to N/256ths of its current brightness, using \"plain math\" dimming rules."];
  Node16 -> Node17 [id="edge15_Node000016_Node000017",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="nscale8x3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$d0/da8/group___scaling.html#ga39bf87e5526120889086cab19ac749b1",tooltip="Scale three one-byte values by a fourth one, which is treated as the numerator of a fraction whose de..."];
  Node17 -> Node5 [id="edge16_Node000017_Node000005",color="steelblue1",style="solid",tooltip=" "];
  Node17 -> Node6 [id="edge17_Node000017_Node000006",color="steelblue1",style="solid",tooltip=" "];
}
